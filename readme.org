#+title: Adaptive Sampling

A repository for robotic exploration in natural environments.

Main focus on information gathering on a 2D surface.

Written in Julia for speed and code flexibility.

Created by Nicholas Harrison.

See a video of an example run [[file:docs/res/ICRA_2024_run.mp4][here]].

* Installation and Setup
Download Julia and run installer: [[https://julialang.org/downloads/]]

Recommended to add julia to your path.

Use git to clone the repository to a local directory:
#+begin_src shell
git clone https://gitlab.acfr.usyd.edu.au/nhar0989/AdaptiveSampling.git
#+end_src

This will create a directory called =AdaptiveSampling=.

1. Navigate into the =AdaptiveSampling= directory on the command line
2. Run =julia --project= to enter the julia REPL and activate the project
3. Run =]instantiate= to install all needed packages
4. Exit the interactive Pkg mode by hitting backspace

** Extra notes
*** Activating a project
The =--project=<path>= flag automatically activates a project environment after starting the REPL. You can run this manually by =]activate <path>= within the julia REPL. Both of these forms accept the path to the directory that contains the =Project.toml= file, e.g. the root directory of this repository. If you are already within a project directory, you can simply run it without a value (=julia --project=) with the same effect.

*** rospy error
If you get: =Error: Unable to load the 'rospy' python package!=

1. Run `ENV["PYTHON"] = "/usr/bin/python"` (or whatever the path is to the python executable that has the rospy package installed)
2. Run =]build PyCall=
3. Restart the julia REPL

*** Code reloading
You'll want to install Revise.jl in order to reload code you've changed while using an open REPL. Follow these steps and you won't have to worry about it again.

1. Start the julia REPL
2. Run =]add Revise=
3. Exit the REPL (=C-d=)
4. Run =mkdir -p ~/.julia/config && echo "using Revise" >> ~/.julia/config/startup.jl=


You can read a bit more about this in the docs.

* Quick Start
To run the project in its current state, run =include("src/main/Main.jl")= at the julia REPL after following the steps in [[*Installation and Setup][Installation and Setup]].

That should be enough to get you started. Go to the documentation to understand more about the code and the Julia language in general.

* Using as a ROS Package
The project includes code to communicate with other nodes in the Robot Operating System (ROS). These features will work just by running the code as normal from the command line or within the Julia REPL.

In addition, this project can be used as a ROS package itself by simply putting it inside your workspace source directory (e.g. =catkin_ws/src=). It works similar to using a ROS python package because it uses rospy behind the scenes. If you want to run, for example, =MainROS.jl=:

1. Make sure the file is executable
2. Run =catkin_make= from the workspace
3. Source the workspace
4. Run =rosrun adaptive_sampling MainROS.jl=


The file will need to have the following code at the top for this to work:
#+begin_src julia
#!/usr/bin/env julia

using Pkg
Pkg.activate(Base.source_dir() * "/../..")
#+end_src

To see further examples of files that this works for, look in the =src/ros_sims= directory.

* Documentation

To generate the docs, run the following command from the project root:

#+begin_src shell
julia --project docs/make.jl
#+end_src

To view them, open [[file:docs/build/index.html]] in a web browser. It's normally nice to build and host them on-line, but the acfr gitlab doesn't allow that.
