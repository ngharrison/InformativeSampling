#+title: Informative Sampling

A repository for robotic exploration in natural environments.

Main focus on information gathering on a 2D surface.

Written in Julia for speed and code flexibility.

Created by Nicholas Harrison.

See a video of an example run [[file:docs/res/ICRA_2024_run.mp4][here]].

* Installation and Setup
Download Julia and run installer: [[https://julialang.org/downloads/]]

Recommended to add julia to your path.

Use git to clone the repository to a local directory:
#+begin_src shell
git clone https://gitlab.acfr.usyd.edu.au/nhar0989/InformativeSampling.git
#+end_src

This will create a directory called =InformativeSampling=. Next run =julia InformativeSampling/setup.jl=. After that finishes, you should be good to go.

* Quick Start
To see an example run of the project in its current state, after following the steps in [[*Installation and Setup][Installation and Setup]],

1. Navigate into the =InformativeSampling= directory on the command line
2. Run =julia --project=app app/missions/example.jl=


Normally you will want to run code from within the REPL since this keeps data around after it finishes and saves compilation so it goes much faster on repeated runs. To do this,

1. Navigate into the =InformativeSampling= directory on the command line
2. Run =julia --project=app= to open the REPL with the app environment activated
3. Run =include("app/missions/example.jl")=


To understand more about the code and the Julia language in general, go to the [[*Documentation][documentation]].

** Custom Runs

The easiest way to start using the code for your own purposes is to copy the =example.jl= file and change the data and settings to fit what you need. You can also look through the other files in =app/missions/= for inspiration, such as =aus.jl= for use with real data and =ros.jl= for use with ROS topics.

An interesting mission is found in =user.jl=. This script does all the normal mapping and automatic sample location selection, but it asks for user input for every sample measurement.

** Extra notes
*** Activating a project
The =--project=<path>= flag automatically activates a project environment after starting the REPL. You can run this manually by =]activate <path>= within the julia REPL. Both of these forms accept the path to the directory that contains the =Project.toml= file, e.g. the app directory of this repository. If you are already within a project directory, you can simply run it without a value (=julia --project=) with the same effect.

*** rospy error
If you get: =Error: Unable to load the 'rospy' python package!=

1. Run ~ENV["PYTHON"] = "/usr/bin/python"~ (or whatever the path is to the python executable that has the rospy package installed)
2. Run =]build PyCall=
3. Restart the julia REPL


This could also happen while running the =setup.jl= script. Make sure

*** Code reloading
When developing the code, you'll want to install Revise.jl in order to reload code you've changed while using an open REPL. Follow these steps and you won't have to worry about it again.

1. Start the julia REPL in the default environment (=julia=)
2. Run =]add Revise=
3. Exit the REPL (=C-d=)
4. Run =mkdir -p ~/.julia/config && echo "using Revise" >> ~/.julia/config/startup.jl=


You can read a bit more about this in the docs.

* Using as a ROS Package
The project includes code to communicate with other nodes in the Robot Operating System (ROS). This code is designed to work with ROS1 and has been tested on Melodic and Noetic. These features will work just by running the code as normal from the command line or within the Julia REPL.

In addition, this project can be used as a ROS package itself by simply putting it inside your workspace source directory (e.g. =catkin_ws/src=). It works similar to using a ROS python package because it uses rospy behind the scenes. If you want to run, for example, =app/missions/ros.jl=:

1. Make sure the file is executable
2. Run =catkin_make= from the workspace
3. Source the workspace
4. Run =rosrun informative_sampling ros.jl=


The file will need to have the following code at the top for this to work:
#+begin_src julia
#!/usr/bin/env julia

using Pkg
Pkg.activate(Base.source_dir() * "/..")
#+end_src

Or you can just run the same script from within the Julia REPL as described [[* Quick Start][above]]. =rosrun= is a convenience to find the executable scripts within the package and doesn't provide maintaining compilation and variables like the REPL does.

Such ROS-based missions will work with the right topics publishing. =ros.jl= is a good way to test things are working, but you will first need to run two other simulation scripts first so it has something to talk to:

=rosrun informative_sampling sample_sim.py=
=rosrun informative_sampling sortie_sim.py=

Files like these are generally found in the =app/ros= directory.

* Documentation

To generate the docs, run the following command from the project root:

#+begin_src shell
julia --project=docs docs/make.jl
#+end_src

To view them, open [[file:docs/build/index.html]] in a web browser. It's normally nice to build and host them on-line, but the acfr gitlab doesn't allow that.

* Tests

To test that some of the core functionality of the package is working, run the following commands from the project root:

1. Open a Julia REPL using =julia --project=core=
2. Run =]test=
